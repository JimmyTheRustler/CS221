package assignment7;
import java.util.Random;

public class Sorting {
	public static void main(String[] args) {
		//TODO make for loop that loops 10,000; 100,000; and 1,000,000 elements. Time as well.
		int max = 10_000;
		int[] randArray = new int[max];
		Random rand = new Random();
		double time;
		boolean sorted = true;
		
		
		//Generates array of rand nums between 1 - max
		for(int i = 0; i < randArray.length; i++) {
			randArray[i] = rand.nextInt(max) + 1;
		}
		
		
		//testing
		time = System.nanoTime();
		heapSort(randArray);
		time = System.nanoTime() - time;
		System.out.println(time / 1000000000.0);
		int i = 0;
		while(sorted) {
			if(i == 0)
				i++;
			else if(randArray[i] < randArray[i-1]) {
				sorted = !sorted;
				System.out.println("Not sorted");
			}
			else {
				if(i != 9999)
					i++;
				if(i == 9999)
					break;
			}
			System.out.println(i);
		}
		System.out.println("Sorted");

	}
	public static void quickSort(int[] array, int start, int end) { }
	public static void mergeSort(int[] array, int start, int end) { }
	
	
	public static void heapSort(int[] array) {
		int count = array.length;
		
		heapify(array, count);
	 
		int end = count - 1;
		while(end > 0){
			int temp = array[end];
			array[end] = array[0];
			array[0] = temp;
			bubbleDown(array, 0, end - 1);
			end--;
		}
	}
	public static void heapify(int[] array, int count){
		int start = (count - 2) / 2;
		while(start >= 0){
			bubbleDown(array, start, count - 1);
			start--;
		}
		
    }
	
	public static void bubbleDown(int[] array, int start, int end) {
		int root = start;
		while((root * 2 + 1) <= end){
			int child = root * 2 + 1;
			if(child + 1 <= end && array[child] < array[child + 1])
				child = child + 1;
			if(array[root] < array[child]){
				int tmp = array[root];
				array[root] = array[child];
				array[child] = tmp;
				root = child;
			}
			else
				return;
		}
	}

	
	//not working
	public static void radixSort(int[] array, int digits) {
		
		int m = array[0];
		int bucketPower = 1;
		int arrayLength = array.length;
        int[] b = new int[10];
        
        for (int i = 1; i < arrayLength; i++)
            if (array[i] > m)
                m = array[i];
        
        while (m / bucketPower > 0)
        {
            int[] bucket = new int[10];
 
            for (int i = 0; i < arrayLength-1; i++)
                bucket[(array[i] / bucketPower) % 10]++;
            for (int i = 1; i < 10; i++)
                bucket[i] += bucket[i - 1];
            for (int i = arrayLength - 1; i >= 0; i--)
                b[--bucket[(array[i] / bucketPower) % 10]] = array[i];
            for (int i = 0; i < arrayLength; i++)
                array[i] = b[i];
            bucketPower *= 10;        
        }
	}
}
