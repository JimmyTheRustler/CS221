import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Graphs {

	public static void main(String[] args) {
		int input = 1;
		Scanner in = new Scanner (System.in);
		boolean existsFile = false;
		boolean legalInput = false;
		boolean existsInput = false;
		Scanner file = null;

		System.out.print("Enter your graph file: ");
		String graphFile = in.nextLine();
		while(!existsFile){
			try{
				file = new Scanner(new File(graphFile));
				existsFile = true;
			}catch(FileNotFoundException e){
				System.out.print("File not found! Try another file: ");
				existsFile = false ;
				graphFile = in.nextLine();
			}
		}
		int size = file.nextInt();
		Graph graphConn = new Graph(size);
		Graph graphWeight = new Graph(size);

		makeMatrix(file, graphConn, graphWeight);

		while(input != 8) {
			System.out.println("1. Is Connected");
			System.out.println("2. Minimum Spanning Tree");
			System.out.println("3. Shortest Path");
			System.out.println("4. Is Metric");
			System.out.println("5. Make Metric");
			System.out.println("6. Traveling Salesman Problem");
			System.out.println("7. Approximate TSP");
			System.out.println("8. Quit\n");


			Scanner userInput = new Scanner(System.in);
			System.out.print("Make your choice (1 - 8): ");
			String stringInput = userInput.nextLine();
			while(!existsInput) {
				try {
					input = Integer.parseInt(stringInput);
					existsInput = true;
				}catch(NumberFormatException e) {

					System.out.println("\nOnly integers allowed.");
					System.out.println("1. Is Connected");
					System.out.println("2. Minimum Spanning Tree");
					System.out.println("3. Shortest Path");
					System.out.println("4. Is Metric");
					System.out.println("5. Make Metric");
					System.out.println("6. Traveling Salesman Problem");
					System.out.println("7. Approximate TSP");
					System.out.println("8. Quit\n");
					System.out.print("Make your choice (1 - 8): ");
					existsInput = false;
					stringInput = in.nextLine();
				}
			}			
			existsInput = false;
			if(input >= 1 && input <8) {
				if(input == 1){ } //perform Is connected
				else if(input == 2){ } //perform Minimum Spanning Tree
				else if(input == 3){ } //perform Shortest Path
				else if(input == 4){ } //perform Is Metric
				else if(input == 5){ } //perform Make Metric
				else if(input == 6){ } //perform TSP
				else if(input == 7){ } //perform Approximate TSP
			}
			else {
				if(input != 8)
					System.out.println("Please only enter integers between 1 and 8\n");
			}
		}
		System.out.println("Program Closed");
		//Code here
		//when user enters 8 or exits the program
	}
	public static void makeMatrix(Scanner in, Graph graphConn, Graph grapWeight){
		int node = 0;
		int conn, weight;
		String line = in.nextLine();//reads in the size of the array
		line = in.nextLine();//skips to the first line of array data
		Scanner scanner = new Scanner(line);
		while(in.hasNextLine()){
			if(node != 0)
				line = in.nextLine();//takes the next line of data
			scanner = new Scanner(line);
			conn = scanner.nextInt();//total number of connections

			while(scanner.hasNext()){
				conn = scanner.nextInt();//node that it is connected to
				graphConn.addNum2(conn, node, 1);//adds a 1 if where two nodes are connected to both places in the matrix
				weight = scanner.nextInt();//weight of connection
				grapWeight.addNum2(conn, node, weight);//adds the weight of the connection between two nodes
			}
			node++;
		}
	}

}